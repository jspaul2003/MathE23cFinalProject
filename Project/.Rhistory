Observed=table(data2$hdr,data2$Crime)
Expected <- outer(rowSums(Observed), colSums(Observed))/sum(Observed)
chisq <- sum((Observed - Expected)^2/Expected); chisq
pval= 1 - pchisq(chisq,1); pval
setwd("~/Harvard/MATH E-23c/Project")
#PACKAGES:
#install.packages("plyr")
library(plyr)
#install.packages("fitdistrplus")
library(fitdistrplus)
#install.packages("utils")
library(utils)
#install.packages("httr")
library(httr)
#install.packages("TSstudio")
library(TSstudio)
#install.packages("tidyverse")
library(tidyverse)
# install.packages("chron")
library(chron)
#install.packages("expss")
library(expss)
#install("ggplot2")
library(ggplot2)
#install.packages("reshape2")
library(reshape2)
#install.packages("stats4")
library(stats4)
#SETTING SEED FOR CONSISTEN
set.seed(3.141592)
#FUNCTIONS
#(REQ: Professional Looking Software Engineering - functions)
#formatJHU:
#Formats JHU COVID 19 data so that it is formatted like
#Europa Open Data
formatJHU=function(JHUdata,title){
JHUdata = arrange(JHUdata, Country.Region)
track=1
Temp1=subset(JHUdata,,-c(Province.State,Lat,Long))
Temp2=subset(Temp1,,-c(Country.Region)) #using for col summing
Temp1=Temp1[0,] #going to fill this in
k=1
attach(JHUdata)
for(i in 2:nrow(JHUdata)){
if(Country.Region[i]!=Country.Region[i-1]){
Temp1[k,1]=Country.Region[i-1]
Temp1[k,2:ncol(Temp1)]=colSums(Temp2[track:(i-1),])
k=k+1
track=i
}
}
JHUdata=Temp1
colnames(JHUdata)[1]="countriesAndTerritories"
detach(JHUdata)
start=as.Date(colnames(JHUdata[2]),format="X%m.%d.%y")
latest=as.Date(colnames(JHUdata[ncol(JHUdata)]),format="X%m.%d.%y")
seq(start:latest)
Date=rep(seq(start,latest,by="days"),nrow(JHUdata))
countries=c()
for(i in 1:nrow(JHUdata)){
countries=c(countries, rep(toString(JHUdata$countriesAndTerritories[i]),(ncol(JHUdata)-1)))
}
results=c()
for(i in 1:nrow(JHUdata)){
results=c(results, as.integer(JHUdata[i,2:ncol(JHUdata)]))
}
data <- data.frame(countries, results, Date)
colnames(data)[2]=title
colnames(data)[1]="countriesAndTerritories"
return(data)
}
#dccum:
#determines cumulative deaths and cases for data
#that follows a structure as in 'geographicdata'
#and data2
dccum = function(datain){
data=datain
N=nrow(data)
track=data$countriesAndTerritories[N]
dsum=0
csum=0
#exploiting how data is arranged by time
for(k in 1:N){
if(track==data$countriesAndTerritories[k]){
dsum=dsum+geographicdata$deaths[k]
csum=csum+geographicdata$cases[k]
}
else{
track=data$countriesAndTerritories[k]
dsum=data$deaths[k]
csum=data$cases[k]
}
data$deaths2[k]=dsum
data$cases2[k]=csum
}
return(data)
}
#data2Setup:
#Sets up data2 once predictors, testing and geographicdata
#combined. Also for use when reading data in as a .csv
data2Setup = function(data){
#(lose rows with NA Values in data)
data2=drop_na(data)
data2$days=data2$Date-data2$Date[which.min(data2$Date)]
#Categorical Variables:
#Rich beign 1 defined as being above mean GDP/capita.
#Crime being 1 defined as being above mean crime
#index (indicates more crime)
#(REQ: At least 2 categorical or logical columns)
data2$Rich=as.numeric(data2$GDP.2018/data2$Population.2020>(mean(data2$GDP.2018/data2$Population.2020))*1+0)
data2$Crime=as.numeric(data2$Crime.Index>(mean(data2$Crime.Index))*1+0)
return(data2)
}
#dateCol:
#Takes a dataframe of the same format as Geographic Data and data2
#(sharing time columns) and generates a column of dates for these
dateCol = function(data){
data$Date= as.Date(paste(data$year,data$month,data$day,sep="-"),"%Y-%m-%d")
return(data)
}
#ChiSq:
#Returns chi squared value
ChiSq <-function(Obs,Exp){
sum((Obs-Exp)^2/Exp)
}
#get_upper_tri:
#Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
#%.%:
#Dot product function
"%.%" <- function(x,y) sum(x*y) #dot product function
#linearm:
#Performs linear regression
linearm = function(predictors,dependent){
v1=rep(1,nrow(predictors))
A <- cbind(v1,predictors)
B <- t(A)%*%A; B
P <- A%*%solve(B)%*%t(A)
return(solve(B)%*%t(A)%*%dependent)
}
data=read.csv("data.csv")
data=dateCol(data)
geographicdata=data[,which(colnames(data)=="countriesAndTerritories"):ncol(data)]
data2=data2Setup(data)
#(REQ: A dataframe, At least 2 numeric columns, A data set with lots of columns,
#allowing comparison of many different variables.)
#(REQ: At least 20 rows)
nrow(geographicdata)
nrow(data2)
install.packages("numDeriv")
library(numDeriv)
F1 <- function(x,y,z)   -y/(x^2+y^2)    #the x-component of the vector field
F2 <- function(x,y,z)   x/(x^2+y^2)    #the y-component of the vector field
F3 <- function(x,y,z)  0
F1 <- function(x,y)   -y/(x^2+y^2)    #the x-component of the vector field
F2 <- function(x,y)   x/(x^2+y^2)    #the y-component of the vector field
#Define a function whose domain and codomain are both R^2.
FVec <- function(v){
return(-v[2]/(v[1]^2 + v[2]^2), v[1]/(v[1]^2+v[2]^2))
}
xSeq <- ySeq <- seq(-10,10, 0.1)
xSeq
#Plot this in the square where x and y range from 0.5 to 2.6.
xSeq <- ySeq <- seq(-10,10, 0.1)
par(mar = c(2,2,1,1))      #make margins as small as possible
plot(NULL, xlim = c(-10,10), ylim = c(-5,5)) #leave room for the arrows
scale <- 0.05 #controls the length of the arrows
for (x in xSeq) {
for (y in ySeq) {
arrows(x,y,x+scale*F1(x,y),y+scale*F2(x,y), length = 0.05)
}
}
xSeq <- ySeq <- seq(-10,10, 0.2)
par(mar = c(2,2,1,1))      #make margins as small as possible
plot(NULL, xlim = c(-10,10), ylim = c(-5,5)) #leave room for the arrows
scale <- 0.05 #controls the length of the arrows
for (x in xSeq) {
for (y in ySeq) {
arrows(x,y,x+scale*F1(x,y),y+scale*F2(x,y), length = 0.05)
}
}
xSeq <- ySeq <- seq(-5,5, 0.2)
par(mar = c(2,2,1,1))      #make margins as small as possible
plot(NULL, xlim = c(-5,5), ylim = c(-5,5)) #leave room for the arrows
scale <- 0.05 #controls the length of the arrows
for (x in xSeq) {
for (y in ySeq) {
arrows(x,y,x+scale*F1(x,y),y+scale*F2(x,y), length = 0.05)
}
}
#Plot this in the square where x and y range from 0.5 to 2.6.
xSeq <- ySeq <- seq(-5,5, 0.1)
par(mar = c(2,2,1,1))      #make margins as small as possible
plot(NULL, xlim = c(-5,5), ylim = c(-5,5)) #leave room for the arrows
scale <- 0.05 #controls the length of the arrows
for (x in xSeq) {
for (y in ySeq) {
arrows(x,y,x+scale*F1(x,y),y+scale*F2(x,y), length = 0.05)
}
}
xSeq <- ySeq <- seq(-5,5, 0.2)
par(mar = c(2,2,1,1))      #make margins as small as possible
plot(NULL, xlim = c(-5,5), ylim = c(-5,5)) #leave room for the arrows
scale <- 0.05 #controls the length of the arrows
for (x in xSeq) {
for (y in ySeq) {
arrows(x,y,x+scale*F1(x,y),y+scale*F2(x,y), length = 0.05)
}
}
jacobian(F1)
f=function(x,y) c(F1(x,y),F2(x,y))
jacobian(F1)
jacobian(F1(1,0))
jacobian(f(1,0))
F1 <- function(x,y)   -y/(x^2+y^2)    #the x-component of the vector field
F2 <- function(x,y)   x/(x^2+y^2)    #the y-component of the vector field
f=function(x,y) c(F1(x,y),F2(x,y))
jacobian(f(1,0))
jacobian(f,1,0)
jacobian(f,c(1,0))
jacobian(f, c(1,0))
f(1,0)
jacobian(f, c(1,0) )
jacobian(f, c(1,1))
jacobian(F1,c(1,1))
jacobian(F1, c(1,1))
data=read.csv("data.csv")
data=dateCol(data)
geographicdata=data[,which(colnames(data)=="countriesAndTerritories"):ncol(data)]
data2=data2Setup(data)
#we will look only at the latest data from the latest date
data2$Date[which.max(data2$Date)]
rich=which(data2$Rich==1&data2$Date==data2$Date[which.max(data2$Date)])
poor=which(data2$Rich==0&data2$Date==data2$Date[which.max(data2$Date)])
deathRateDif=mean(data2$deathrate[rich])-mean(data2$deathrate[poor]); deathRateDif
#Unsuprisingly Higher, but not by much. Likely to be insignificant.
temp=data2[which(data2$Date==data2$Date[which.max(data2$Date)]),]
N=100000; diff=numeric(N)
for(i in 1:N){
samp=sample(nrow(temp),sum(temp$Rich==0))
drsamp=mean(temp$deathrate[samp])
drother=mean(temp$deathrate[-samp])
diff[i]=drsamp-drother
}
hist(diff,breaks=100, col=rgb(0,0.62,0.107,1))
abline(v=deathRateDif,col="blue")
fit=step(glm(deathrate~.^2,data=temp,family="binomial"))
temp <- subset(data2, select = -c(Country,countriesAndTerritories, geoId, countryterritoryCode, continentExp, Date, day, month, year, hdr, Entity, Code, dateRep))
fit=step(glm(deathrate~.^2,data=temp,family="binomial"))
temp <- subset(data2, select = -c(Country,countriesAndTerritories, geoId, countryterritoryCode, continentExp, Date, day, month, year,Entity, Code, dateRep))
fit=step(glm(deathrate~.^2,data=temp,family="binomial"))
View(temp)
View(temp)
View(temp)
warnings()
fit
temp <- subset(data2, select = -c(Country,countriesAndTerritories, geoId, countryterritoryCode, continentExp, Date, day, month, year,Entity, Code, dateRep))
fit=(glm(deathrate~.^2,data=temp,family="binomial"))
summary(fit)
hist(geographicdata$deathrate[which(geographicdata$deaths2!=0)],prob=T,breaks="fd")
curve( dgamma(x,0.45,13)    ,add=T,col="red")
library(fitdistrplus)
fitdistr(geographicdata$deathrate[which(geographicdata$deaths2!=0)], "gamma")
curve( dgamma(x,1.32888200 ,42.14284222)    ,add=T,col="red")
hist(geographicdata$deathrate[which(geographicdata$deaths2!=0)],prob=T,breaks="fd")
#Lets try modelling with a gamma function
#fitdistr
curve( dgamma(x,1.32888200 ,42.14284222)    ,add=T,col="red")
bins=qgamma(0.1*(1:10),1.32888200 ,42.14284222)
binstuff=cut(geographicdata$deathrate[which(geographicdata$deaths2!=0)], breaks=bins,labels=F); binstuff
obs=as.vector(table(binstuff))
binstuff=cut(geographicdata$deathrate[which(geographicdata$deaths2!=0)], breaks=bins,labels=F)
geographicdata$deathrate[761]
geographicdata$deathrate[121:130]
bins=qgamma(0.1*(0:10),1.32888200 ,42.14284222)
binstuff=cut(geographicdata$deathrate[which(geographicdata$deaths2!=0)], breaks=bins,labels=F); binstuff
obs=as.vector(table(binstuff))
exp=rep(sum(obs)/10,10)
chisq=sum((obs-exp)^2/exp); chisq
pval=pchisq(chisq,df=7,lower.tail = F); pval
hist(geographicdata$deathrate[which(geographicdata$deaths2!=0)],prob=T,breaks=500)
#Lets try modelling with a gamma function
#fitdistr
curve( dgamma(x,1.32888200 ,42.14284222)    ,add=T,col="red")
world=geographicdata[c(seq(1:max(geographicdata$days)),max(geographicdata$days)),]
world$deathrate=0
a=geographicdata[which(geographicdata$days==1),]
a=geographicdata[which(geographicdata$days==max(geographicdata$days)&geographicdata$countriesAndTerritories%in%a$countriesAndTerritories),]
for(i in 1:(max(data2$days))){
world$Date[i]=i+min(geographicdata2$Date)
world$days[i]=i
world$deathrate[i]=sum(geographicdata$deaths2[which(geographicdata$days==i)])/(sum(geographicdata$cases2[which(geographicdata$days==i)])+1*(sum(geographicdata$cases2[which(geographicdata$days==i)])==0))
world$deaths2[i]=sum(geographicdata$deaths2[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$cases2[i]=sum(geographicdata$cases2[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$deaths[i]=sum(geographicdata$deaths[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$cases[i]=sum(geographicdata$cases[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$active[i]=sum(geographicdata$active[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
}
barplot(rbind((world$deaths2),world$active/6*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(world$deaths2)
world=geographicdata[c(seq(1:max(geographicdata$days)),max(geographicdata$days)),]
world$deathrate=0
a=geographicdata[which(geographicdata$days==1),]
a=geographicdata[which(geographicdata$days==max(geographicdata$days)&geographicdata$countriesAndTerritories%in%a$countriesAndTerritories),]
for(i in 1:(max(data2$days))){
world$Date[i]=i+min(geographicdata2$Date)
world$days[i]=i
world$deathrate[i]=sum(geographicdata$deaths2[which(geographicdata$days==i)])/(sum(geographicdata$cases2[which(geographicdata$days==i)])+1*(sum(geographicdata$cases2[which(geographicdata$days==i)])==0))
world$deaths2[i]=sum(geographicdata$deaths2[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$cases2[i]=sum(geographicdata$cases2[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$deaths[i]=sum(geographicdata$deaths[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$cases[i]=sum(geographicdata$cases[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$active[i]=sum(geographicdata$active[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
}
View(world)
world$dr2=world$deaths/world$active
barplot(rbind((world$deaths2),world$active/6*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(world$deaths2)
world$deaths2
View(geographicdata)
world=geographicdata[c(seq(1:max(geographicdata$days)),max(geographicdata$days)),]
a=geographicdata[which(geographicdata$days==1),]
a=geographicdata[which(geographicdata$days==max(geographicdata$days)&geographicdata$countriesAndTerritories%in%a$countriesAndTerritories),]
View(a)
a=geographicdata[which(geographicdata$days==1),]
View(a)
geographicdata$days=geographicdata$Date-geographicdata$Date[which.min(geographicdata$Date)]
world=geographicdata[c(seq(1:max(geographicdata$days)),max(geographicdata$days)),]
world$deathrate=0
a=geographicdata[which(geographicdata$days==1),]
a=geographicdata[which(geographicdata$days==max(geographicdata$days)&geographicdata$countriesAndTerritories%in%a$countriesAndTerritories),]
for(i in 1:(max(data2$days))){
world$Date[i]=i+min(geographicdata2$Date)
world$days[i]=i
world$deathrate[i]=sum(geographicdata$deaths2[which(geographicdata$days==i)])/(sum(geographicdata$cases2[which(geographicdata$days==i)])+1*(sum(geographicdata$cases2[which(geographicdata$days==i)])==0))
world$deaths2[i]=sum(geographicdata$deaths2[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$cases2[i]=sum(geographicdata$cases2[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$deaths[i]=sum(geographicdata$deaths[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$cases[i]=sum(geographicdata$cases[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$active[i]=sum(geographicdata$active[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
}
View(world)
View(a)
a=geographicdata[which(geographicdata$days==1),]
View(a)
a=geographicdata[which(geographicdata$days==5),]
View(a)
nrow(geographicdata[which(geographicdata$days==2)])
geographicdata$days
nrow(geographicdata[which(geographicdata$days==2)])
geographicdata[which(geographicdata$days==2)]
which(geographicdata$days==2)
which(geographicdata$days==3)
which(geographicdata$days==4)
which(geographicdata$days==5)
subset(geographicdata,geographicdata$days==2)
subset(geographicdata,geographicdata$days==5)
#Get data from internet
JHURecovs=read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")
predictors=read.csv("https://raw.githubusercontent.com/jspaul2003/nCoV2019/master/more_data/covid19_by_country.csv")
testing=read.csv("https://raw.githubusercontent.com/jspaul2003/nCoV2019/master/testing.csv")
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
geographicdata=read.csv(tf)
#Formatting this data
JHURecovs1=formatJHU(JHURecovs,"recoveries")
predictors$countriesAndTerritories=predictors$Country
testing$countriesAndTerritories=testing$Entity
testing$Date=as.Date(testing$Date, format= "%b %d, %y")
geographicdata=dateCol(geographicdata)
geographicdata=geographicdata%>%right_join(JHURecovs1, by=c("countriesAndTerritories","Date"))
geographicdata=drop_na(geographicdata)
#Making Our Big Datasets
#(REQ: A dataframe, At least 2 numeric columns, A data set with lots of columns,
#allowing comparison of many different variables.)
geographicdata$days=geographicdata$Date-geographicdata$Date[which.min(geographicdata$Date)]
#determine cumulative deaths and cases for geographic data-> use this
#to find active cases, deathrate
geographicdata=dccum(geographicdata)
geographicdata$active=geographicdata$cases2-geographicdata$deaths2-geographicdata$recoveries
geographicdata$deathrate=geographicdata$deaths2/(geographicdata$cases2+1*(geographicdata$cases2==0))
data2=geographicdata %>% inner_join(testing, by=c("countriesAndTerritories","Date"))
data2=predictors %>% right_join(data2, by=c("countriesAndTerritories"))
data2 <- subset(data2, select = -c(Tests, Test.Pop,Quarantine,Schools,Restrictions,Total.Recovered,Total.Deaths,Total.Infected,popData2018))
data2=data2Setup(data2)
nrow(geographicdata)
nrow(data2)
View(geographicdata)
world=geographicdata[c(seq(1:max(geographicdata$days)),max(geographicdata$days)),]
world$deathrate=0
a=geographicdata[which(geographicdata$days==5),]
a=geographicdata[which(geographicdata$days==max(geographicdata$days)&geographicdata$countriesAndTerritories%in%a$countriesAndTerritories),]
for(i in 1:(max(data2$days))){
world$Date[i]=i+min(geographicdata2$Date)
world$days[i]=i
world$deathrate[i]=sum(geographicdata$deaths2[which(geographicdata$days==i)])/(sum(geographicdata$cases2[which(geographicdata$days==i)])+1*(sum(geographicdata$cases2[which(geographicdata$days==i)])==0))
world$deaths2[i]=sum(geographicdata$deaths2[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$cases2[i]=sum(geographicdata$cases2[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$deaths[i]=sum(geographicdata$deaths[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$cases[i]=sum(geographicdata$cases[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
world$active[i]=sum(geographicdata$active[which(geographicdata$days==i&(geographicdata$countriesAndTerritories%in%a$countriesAndTerritories))])
}
barplot(rbind((world$deaths2),world$active/6*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/6*pbinom(1:nrow(world),(round(world$active)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
pbinom(1:nrow(world),(round(world$active)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
pbinom(1:nrow(world),(round(world$active)),mean(world$deathrate), beside = TRUE, col = c("red", "blue")) #no
pbinom(1:nrow(world),(round(world$active)),mean(world$deathrate)) #no
world$active/1000
barplot(rbind((world$deaths2),world$active/6*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
fitdistr(world$deaths2, "poisson")
barplot(rbind((world$deaths2),ppois(27670.85714)) #no
)
barplot(rbind((world$deaths2),ppois(27670.85714)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths2),ppois(1:nrow(world),27670.85714)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths2),world$active*ppois(1:nrow(world),27670.85714)),beside = TRUE, col = c("red", "blue"))
fitdistr(world$deaths2, "binomial")
fitdistr(world$deaths2, "binom")
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),27670.85714)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),27670.85714)),beside = TRUE, col = c("red", "blue"))
dpois(1:nrow(world),27670.85714)
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),100)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),10)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),27670.85714/1000)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),27670.85714/10000)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),27670.85714/100)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),400)),beside = TRUE, col = c("red", "blue"))
3
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),300)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),200)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),100)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),50)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),60)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),550)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),55)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),52)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world)+100,52)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world)+10,52)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world)+5,52)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world)+7,52)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world)+4,52)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world)+4,100)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world)+4,60)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world)+4,50)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world)+4,55)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths),world$active*dpois(1:nrow(world),55)),beside = TRUE, col = c("red", "blue"))
worldsamp=sample(world$deathrate,50)
worldsamp=sample(world,50)
worldsamp=sample(world$deaths2,50)
barplot(rbind((worldsamp),world$active*dpois(1:nrow(world),55)),beside = TRUE, col = c("red", "blue"))
barplot(rbind((world$deaths2),world$active/6*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/5*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/7*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/8*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/9*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/9*pbinom(1:nrow(world),(round(world$active/100)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
w
barplot(rbind((world$deaths2),world$active/9*pbinom(1:nrow(world),(round(world$active/500)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
w
barplot(rbind((world$deaths2),world$active/9*pbinom(1:nrow(world),(round(world$active/800)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
w
barplot(rbind((world$deaths2),world$active/9*pbinom(1:nrow(world),(round(world$active/100)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/9*pbinom(1:nrow(world),(round(world$active/800)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/9*pbinom(1:nrow(world),(round(world$active/1100)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/9*pbinom(1:nrow(world),(round(world$active/1500)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/5*pbinom(1:nrow(world),(round(world$active/1500)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/6*pbinom(1:nrow(world),(round(world$active/1500)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/6.5*pbinom(1:nrow(world),(round(world$active/1500)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/7*pbinom(1:nrow(world),(round(world$active/1500)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/6.5*pbinom(1:nrow(world),(round(world$active/1500)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/6.5*pbinom(1:nrow(world),(round(world$active/1700)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
*
barplot(rbind((world$deaths2),world$active/6.5*pbinom(1:nrow(world),(round(world$active/1500)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/6.5*pbinom(1:nrow(world),(round(world$active/2000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/4*pbinom(1:nrow(world),(round(world$active/2000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/3*pbinom(1:nrow(world),(round(world$active/2000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/5*pbinom(1:nrow(world),(round(world$active/2000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/6*pbinom(1:nrow(world),(round(world$active/2000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active/6*0.9*pbinom(1:nrow(world),(round(world$active/2000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.9*pbinom(1:nrow(world),(round(world$active/2000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.2*pbinom(1:nrow(world),(round(world$active/2000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.15*pbinom(1:nrow(world),(round(world$active/2000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/2000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/1500)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/10)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/100)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/500)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/300)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/400)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/500)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.15*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),10+world$active*0.17*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/100)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.17*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.2*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
barplot(rbind((world$deaths2),world$active*0.18*pbinom(1:nrow(world),(round(world$active/1000)),mean(world$deathrate))), beside = TRUE, col = c("red", "blue")) #no
plot(world$deaths2)
world[1,]
world[2,]
world=world[1:nrow(world)-2,]
world=world[1:nrow((world)-2),]
nrow((world)-2)
world=world[1:(nrow(world)-2),]
fitdistr(geographicdata$world$deaths2, "poisson")
geographicdata$world$deaths2
world
View(world)
world$deaths2
